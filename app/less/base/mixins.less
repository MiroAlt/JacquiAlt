/**
	attach an opacity to any color (especially from @variable), after calling this mixin, use @resultAlphaColor as a result:
	{
	 	.alphaColor(@text-color, 0.2);
		color: @resultAlphaColor;
	}
**/
.alphaColor(@color, @alpha) {
	@resultAlphaColor:  rgba(red(@color), green(@color), blue(@color), @alpha);;
}

/**
	cross browser simple linear gradient
**/
.linearGradient (@type, @from, @to) {
	background: @from;
	background: -moz-linear-gradient(@type, @from 0%, @to 100%); /* FF3.6+ */
	background: -webkit-linear-gradient(@type, @from 0%, @to 100%); /* Chrome10+,Safari5.1+ */
	background: -o-linear-gradient(@type, @from 0%, @to 100%); /* Opera 11.10+ */
	background: -ms-linear-gradient(@type, @from 0%, @to 100%); /* IE10+ */
	background: linear-gradient(@type, @from 0%, @to 100%); /* W3C */
}

.transform(@value) {
	-ms-transform: @value;
	-moz-transform: @value;
	-webkit-transform: @value;
	transform: @value;
}

.translateY(@value) {
	-ms-transform: translateY(@value);
	-moz-transform: translateY(@value);
	-webkit-transform: translateY(@value);
	transform: translateY(@value);
}

.translateX(@value) {
	-ms-transform: translateX(@value);
	-moz-transform: translateX(@value);
	-webkit-transform: translateX(@value);
	transform: translateX(@value);
}

.translateZ(@value) {
	-webkit-transform: translateZ(@value);
	-ms-transform: translateZ(@value);
	-moz-transform: translateZ(@value);
	transform: translateZ(@value);
}

.translate(@valueX, @valueY) {
	-webkit-transform: translate(@valueX, @valueY);
	-ms-transform: translate(@valueX, @valueY);
	-moz-transform: translate(@valueX, @valueY);
	transform: translate(@valueX, @valueY);
}

.transition(@type, @duration, @delay, @easing) {
	-webkit-transition: @type @duration @delay @easing;
	-moz-transition: @type @duration @delay @easing;
	-ms-transition: @type @duration @delay @easing;
	transition: @type @duration @delay @easing;
}

.scale(@value) {
	-webkit-transform: scale(@value);
	-ms-transform: scale(@value);
	-moz-transform: scale(@value);
	transform: scale(@value);
}

.rotate(@value) {
	-webkit-transform: rotate(@value);
	-moz-transform: rotate(@value);
	-ms-transform: rotate(@value);
	transform: rotate(@value);
}

.translateYAndRotate(@valueTranslate, @valueRotate) {
	-webkit-transform: translateY(@valueTranslate) rotate(@valueRotate);
	-moz-transform: translateY(@valueTranslate) rotate(@valueRotate);
	-ms-transform: translateY(@valueTranslate) rotate(@valueRotate);
	transform: translateY(@valueTranslate) rotate(@valueRotate);
}


/* Gradient Mixin - https://webdesign.tutsplus.com/tutorials/making-gradients-easier-with-less-mixins--cms-24072  */
.gradient(@type; @colors; @dir: 0deg; @prefixes: webkit, moz, ms, o; @index: length(@prefixes)) when (@index > 0) {
  .gradient(@type; @colors; @dir; @prefixes; (@index - 1));

  @prefix  : extract(@prefixes, @index);
  @dir-old : 90 - (@dir);

  background-image: ~"-@{prefix}-@{type}-gradient(@{dir-old}, @{colors})";
  & when ( @index = length(@prefixes) ) {
    background-image: ~"@{type}-gradient(@{dir}, @{colors})";
  }
}

/*
As mentioned, weâ€™re only required to specify the gradient type and the colors, for example:
.gradient(linear; #2BC0E4, #EAECC6);
Notice that each parameter should be separated with a ;. We use a comma to list colors and vendor prefixes.

If you would like to customize the color stop you could write:
.gradient(linear; #2BC0E4, #EAECC6 30%);

Changing the gradient direction should be done with an angle value instead of its keyword counterpart:
.gradient(linear; #2BC0E4, #EAECC6 30%; 180deg);

The following is an example in which we create a radial gradient:
.gradient(circle; #2BC0E4, #EAECC6);

Generating a repeating gradient? No problemo:
.gradient(repeating-linear; #085078, #2BC0E4 25px, #EAECC6 50px);
In this case, make sure you adjust the background-size accordingly to see the desired result.
*/

.font-size(@font-size: 16){
	@pxFontValue: (@font-size / 10);
	@pxLineValue: (@font-size / 10 * 1.5);
	font-size: @font-size * 1px;
	line-height: @font-size * 1.5 * 1px;
	font-size: ~"@{pxFontValue}rem";
	line-height: ~"@{pxLineValue}rem";
}



.box-shadow (@string) {
  -webkit-box-shadow: @string;
  -moz-box-shadow:    @string;
  box-shadow:         @string;
}

.translateXtranslateYAndRotate(@valueTranslateX, @valueTranslateY, @valueRotate) {
  -webkit-transform: translateX(@valueTranslateX) translateY(@valueTranslateY) rotate(@valueRotate);
  -moz-transform: translateX(@valueTranslateX) translateY(@valueTranslateY) rotate(@valueRotate);
  -ms-transform: translateX(@valueTranslateX) translateY(@valueTranslateY) rotate(@valueRotate);
  transform: translateX(@valueTranslateX) translateY(@valueTranslateY) rotate(@valueRotate);
}
